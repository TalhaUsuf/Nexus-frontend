# Nexus Platform Backend Configuration

# Authentication & OAuth
MICROSOFT_CLIENT_ID=your_microsoft_app_client_id
MICROSOFT_CLIENT_SECRET=your_microsoft_app_client_secret
MICROSOFT_TENANT_ID=your_organization_tenant_id
# OAuth redirect URL after Microsoft authentication
OAUTH_REDIRECT_URL=http://localhost:3000/auth/callback

# Backend API Base URL
NEXT_PUBLIC_API_BASE_URL=http://localhost:8075/api

# Authentication Endpoints
# POST /api/auth/microsoft - Initiate Microsoft OAuth flow
# Input: { redirect_uri: string }
# Output: { auth_url: string, state: string }
NEXT_PUBLIC_AUTH_MICROSOFT_ENDPOINT=/auth/microsoft

# POST /api/auth/callback - Handle OAuth callback and create session
# Input: { code: string, state: string }
# Output: { user: User, token: string, expires_in: number }
NEXT_PUBLIC_AUTH_CALLBACK_ENDPOINT=/auth/callback

# POST /api/auth/invite-login - Login via invite link
# Input: { invite_token: string, email: string }
# Output: { user: User, token: string, requires_setup: boolean }
NEXT_PUBLIC_AUTH_INVITE_LOGIN_ENDPOINT=/auth/invite-login

# User Management Endpoints
# GET /api/users - Get all organization users (Admin only)
# Input: Query params { page?: number, limit?: number, role?: string }
# Output: { users: User[], total: number, page: number }
NEXT_PUBLIC_USERS_ENDPOINT=/users

# POST /api/users/invite - Invite new user (Admin only)
# Input: { email: string, role: UserRole, department?: string }
# Output: { user: User, invite_link: string, expires_at: string }
NEXT_PUBLIC_USERS_INVITE_ENDPOINT=/users/invite

# PUT /api/users/:id/role - Update user role (Admin only)
# Input: { role: UserRole }
# Output: { user: User, updated_permissions: Permission[] }
NEXT_PUBLIC_USERS_ROLE_ENDPOINT=/users/{id}/role

# DELETE /api/users/:id - Remove user (Admin only)
# Input: None
# Output: { success: boolean, message: string }
NEXT_PUBLIC_USERS_DELETE_ENDPOINT=/users/{id}

# Bot Management Endpoints
# GET /api/bot/approvals - Get pending bot access requests
# Input: Query params { status?: 'pending' | 'approved' | 'rejected' }
# Output: { requests: BotRequest[], total: number }
NEXT_PUBLIC_BOT_APPROVALS_ENDPOINT=/bot/approvals

# POST /api/bot/approvals/:id/approve - Approve bot access request
# Input: { approved: boolean, reason?: string }
# Output: { request: BotRequest, bot_added: boolean }
NEXT_PUBLIC_BOT_APPROVE_ENDPOINT=/bot/approvals/{id}/approve

# GET /api/bot/channels - Get active channels where bot is present
# Input: Query params { team_id?: string, active?: boolean }
# Output: { channels: Channel[], teams: Team[], stats: ChannelStats }
NEXT_PUBLIC_BOT_CHANNELS_ENDPOINT=/bot/channels

# Chat & Knowledge Endpoints
# POST /api/chat/message - Send message to knowledge bot
# Input: { message: string, conversation_id?: string, context?: object }
# Output: { response: string, sources: Reference[], conversation_id: string }
NEXT_PUBLIC_CHAT_MESSAGE_ENDPOINT=/chat/message

# GET /api/chat/conversations - Get user's chat conversations
# Input: Query params { limit?: number, offset?: number }
# Output: { conversations: Conversation[], total: number }
NEXT_PUBLIC_CHAT_CONVERSATIONS_ENDPOINT=/chat/conversations

# GET /api/chat/references/:id - Get detailed reference information
# Input: Reference ID as path parameter
# Output: { reference: DetailedReference, content: string, metadata: object }
NEXT_PUBLIC_CHAT_REFERENCE_ENDPOINT=/chat/references/{id}

# Microsoft Teams Integration Endpoints
# POST /api/teams/connect - Connect organization to Microsoft Teams
# Input: { auth_code: string, permissions: string[] }
# Output: { connection: TeamsConnection, bot_id: string, webhook_url: string }
NEXT_PUBLIC_TEAMS_CONNECT_ENDPOINT=/teams/connect

# GET /api/teams/status - Get Teams integration status
# Input: None
# Output: { connected: boolean, permissions: string[], last_sync: string }
NEXT_PUBLIC_TEAMS_STATUS_ENDPOINT=/teams/status

# POST /api/teams/sync - Manually trigger data sync
# Input: { full_sync?: boolean, team_ids?: string[] }
# Output: { sync_job_id: string, estimated_duration: number }
NEXT_PUBLIC_TEAMS_SYNC_ENDPOINT=/teams/sync

# Analytics Endpoints
# GET /api/analytics/dashboard - Get admin dashboard analytics
# Input: Query params { period?: '7d' | '30d' | '90d' }
# Output: { stats: DashboardStats, charts: ChartData[] }
NEXT_PUBLIC_ANALYTICS_DASHBOARD_ENDPOINT=/analytics/dashboard

# GET /api/analytics/usage - Get platform usage analytics
# Input: Query params { user_id?: string, period?: string }
# Output: { usage: UsageStats, trends: TrendData[] }
NEXT_PUBLIC_ANALYTICS_USAGE_ENDPOINT=/analytics/usage

# Database Configuration
DATABASE_URL=postgresql://username:password@localhost:5432/nexus_db
REDIS_URL=redis://localhost:6379

# Security
JWT_SECRET=your_jwt_secret_key_here
ENCRYPTION_KEY=your_32_character_encryption_key

# Microsoft Graph API
MICROSOFT_GRAPH_BASE_URL=https://graph.microsoft.com/v1.0
MICROSOFT_GRAPH_BETA_URL=https://graph.microsoft.com/beta

# File Storage
AZURE_STORAGE_CONNECTION_STRING=your_azure_storage_connection
AZURE_STORAGE_CONTAINER=nexus-files

# Logging & Monitoring
LOG_LEVEL=info
SENTRY_DSN=your_sentry_dsn_for_error_tracking
